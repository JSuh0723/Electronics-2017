#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include "RTClib.h"
#ifndef PSTR
 #define PSTR // Make Arduino Due happy
#endif

#define PIN 6

/* notes for my arduino wiring:
 * pin 2: top button (set)
 * pin 3: middle button (up)
 * pin 4: bottom button (down)
 * pin 6: LED strand data
 * pin A0: photosensor
 * pin A4: RTC Module SDA
 * pin A5: RTC Module SCL
 */
 
int mytimemonth;
int mytimeday;
int mytimehr;
int mytimemin;
int mytimesec;

RTC_DS3231 rtc;

// MATRIX DECLARATION:
// Parameter 1 = width of NeoPixel matrix
// Parameter 2 = height of matrix
// Parameter 3 = pin number (most are valid)
// Parameter 4 = matrix layout flags, add together as needed:
//   NEO_MATRIX_TOP, NEO_MATRIX_BOTTOM, NEO_MATRIX_LEFT, NEO_MATRIX_RIGHT:
//     Position of the FIRST LED in the matrix; pick two, e.g.
//     NEO_MATRIX_TOP + NEO_MATRIX_LEFT for the top-left corner.
//   NEO_MATRIX_ROWS, NEO_MATRIX_COLUMNS: LEDs are arranged in horizontal
//     rows or in vertical columns, respectively; pick one or the other.
//   NEO_MATRIX_PROGRESSIVE, NEO_MATRIX_ZIGZAG: all rows/columns proceed
//     in the same order, or alternate lines reverse direction; pick one.
//   See example below for these values in action.
// Parameter 5 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)


// Example for NeoPixel Shield.  In this application we'd like to use it
// as a 5x8 tall matrix, with the USB port positioned at the top of the
// Arduino.  When held that way, the first pixel is at the top right, and
// lines are arranged in columns, progressive order.  The shield uses
// 800 KHz (v2) pixels that expect GRB color data.
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(11, 11, PIN,
  NEO_MATRIX_BOTTOM     + NEO_MATRIX_LEFT +
  NEO_MATRIX_ROWS + NEO_MATRIX_ZIGZAG,
  NEO_GRB            + NEO_KHZ800);

const uint16_t colors[] = {
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255) };

const int buttonPin1 = 2;
const int buttonPin2 = 3;
const int ledPin = 6;
int ButtonState1 = 0;
int ButtonState2 = 0;
int ButtonStatePrev1 = 0;
int ButtonStatePrev2 = 0;
int Switch1 = 0;
int Switch2 = 0;

void setup() {
  Serial.begin(9600);
  matrix.begin();
  matrix.setBrightness(40);
  matrix.setTextColor(colors[0]);
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);
  pinMode(ledPin, OUTPUT);
  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC"); //program LEDs to show "NO CLOCK"
    while (1);
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, lets set the time!"); //program LEDs to show "SET CLOCK"
    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }
}

int x    = matrix.width();
int pass = 0;

void loop() {
  DateTime now = rtc.now();
  mytimemonth=now.month();
  mytimeday=now.day();
  mytimehr=now.hour();
  mytimemin=now.minute();
  mytimesec=now.second();
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
  Serial.println();
  ButtonStatePrev1 = ButtonState1;
  ButtonState1 = digitalRead(buttonPin1);
  ButtonStatePrev2 = ButtonState2;
  ButtonState2 = digitalRead(buttonPin2);
  if(ButtonState1 == 1 && ButtonStatePrev1 == 0) {
    Switch1 = !Switch1;
      if(Switch1 == 0) {
        Clear();
        displayWords();  
    }
      if(Switch1 == 1) {
        Clear();
        HI();
        DR();
        CHANG();
        SIU();
        matrix.show();
    }
  }
  if(ButtonState2 == 1 && ButtonStatePrev2 == 0) {
    Switch2 = !Switch2;
      if(Switch2 == 0) {
        Clear();
        matrix.show();
      }
      if(Switch2 == 1) {
        Clear();
        wordScroll();
    }
  }  
}

//matrix.drawPixel(col,row)
void ITS(){
  matrix.drawPixel(0,0, matrix.Color(255,0,0));
  matrix.drawPixel(1,0, matrix.Color(255,0,0));
  matrix.drawPixel(2,0, matrix.Color(255,0,0));
}
void A() {
  matrix.drawPixel(4,0, matrix.Color(255,0,0));
}
void HI() {
  matrix.drawPixel(5,0, matrix.Color(255,0,0));
  matrix.drawPixel(6,0, matrix.Color(255,0,0));
}
void HALF() {
  matrix.drawPixel(7,0, matrix.Color(255,0,0));
  matrix.drawPixel(8,0, matrix.Color(255,0,0));
  matrix.drawPixel(9,0, matrix.Color(255,0,0));
  matrix.drawPixel(10,0, matrix.Color(255,0,0));
}
void TEN() {
  matrix.drawPixel(1,1, matrix.Color(0,255,0));
  matrix.drawPixel(2,1, matrix.Color(0,255,0));
  matrix.drawPixel(3,1, matrix.Color(0,255,0));
}
void QUARTER() {
  matrix.drawPixel(4,1, matrix.Color(0,255,0));
  matrix.drawPixel(5,1, matrix.Color(0,255,0));
  matrix.drawPixel(6,1, matrix.Color(0,255,0));
  matrix.drawPixel(7,1, matrix.Color(0,255,0));
  matrix.drawPixel(8,1, matrix.Color(0,255,0));
  matrix.drawPixel(9,1, matrix.Color(0,255,0));
  matrix.drawPixel(10,1, matrix.Color(0,255,0));
}
void TWENTY() {
  matrix.drawPixel(0,2, matrix.Color(0,255,0));
  matrix.drawPixel(1,2, matrix.Color(0,255,0));
  matrix.drawPixel(2,2, matrix.Color(0,255,0));
  matrix.drawPixel(3,2, matrix.Color(0,255,0));
  matrix.drawPixel(4,2, matrix.Color(0,255,0));
  matrix.drawPixel(5,2, matrix.Color(0,255,0));
}
void FIVE() {
  matrix.drawPixel(7,2, matrix.Color(0,255,0));
  matrix.drawPixel(8,2, matrix.Color(0,255,0));
  matrix.drawPixel(9,2, matrix.Color(0,255,0));
  matrix.drawPixel(10,2, matrix.Color(0,255,0));
}
void TIL() {
  matrix.drawPixel(3,3, matrix.Color(0,255,0));
  matrix.drawPixel(4,3, matrix.Color(0,255,0));
  matrix.drawPixel(5,3, matrix.Color(0,255,0));
}
void PAST() {
  matrix.drawPixel(7,3, matrix.Color(0,255,0));
  matrix.drawPixel(8,3, matrix.Color(0,255,0));
  matrix.drawPixel(9,3, matrix.Color(0,255,0));
  matrix.drawPixel(10,3, matrix.Color(0,255,0));
}
void SEVEN() {
  matrix.drawPixel(1,4, matrix.Color(0,255,0));
  matrix.drawPixel(2,4, matrix.Color(0,255,0));
  matrix.drawPixel(3,4, matrix.Color(0,255,0));
  matrix.drawPixel(4,4, matrix.Color(0,255,0));
  matrix.drawPixel(5,4, matrix.Color(0,255,0));
}
void NOON() {
  matrix.drawPixel(7,4, matrix.Color(0,255,0));
  matrix.drawPixel(8,4, matrix.Color(0,255,0));
  matrix.drawPixel(9,4, matrix.Color(0,255,0));
  matrix.drawPixel(10,4, matrix.Color(0,255,0));
}
void CHANG() {
  matrix.drawPixel(1,5, matrix.Color(0,255,0));
  matrix.drawPixel(2,5, matrix.Color(0,255,0));
  matrix.drawPixel(3,5, matrix.Color(0,255,0));
  matrix.drawPixel(4,5, matrix.Color(0,255,0));
  matrix.drawPixel(5,5, matrix.Color(0,255,0));
}
void SIU() {
  matrix.drawPixel(7,5, matrix.Color(0,255,0));
  matrix.drawPixel(8,5, matrix.Color(0,255,0));
  matrix.drawPixel(9,5, matrix.Color(0,255,0));
}
void MIDNIGHT() {
  matrix.drawPixel(0,6, matrix.Color(0,255,0));
  matrix.drawPixel(1,6, matrix.Color(0,255,0));
  matrix.drawPixel(2,6, matrix.Color(0,255,0));
  matrix.drawPixel(3,6, matrix.Color(0,255,0));
  matrix.drawPixel(4,6, matrix.Color(0,255,0));
  matrix.drawPixel(5,6, matrix.Color(0,255,0));
  matrix.drawPixel(6,6, matrix.Color(0,255,0));
  matrix.drawPixel(7,6, matrix.Color(0,255,0));
}
void TENBOT() {
  matrix.drawPixel(8,6, matrix.Color(0,255,0));
  matrix.drawPixel(9, 6, matrix.Color(0,255,0));
  matrix.drawPixel(10,6, matrix.Color(0,255,0));
}
void FIVEBOT() {
  matrix.drawPixel(0,7, matrix.Color(0,255,0));
  matrix.drawPixel(1,7, matrix.Color(0,255,0));
  matrix.drawPixel(2,7, matrix.Color(0,255,0));
  matrix.drawPixel(3,7, matrix.Color(0,255,0));
}
void NINE() {
  matrix.drawPixel(4,7, matrix.Color(0,255,0));
  matrix.drawPixel(5,7, matrix.Color(0,255,0));
  matrix.drawPixel(6,7, matrix.Color(0,255,0));
  matrix.drawPixel(7,7, matrix.Color(0,255,0));
}
void TWO() {
  matrix.drawPixel(8,7, matrix.Color(0,255,0));
  matrix.drawPixel(9,7, matrix.Color(0,255,0));
  matrix.drawPixel(10,7, matrix.Color(0,255,0));
}
void ELEVEN() {
  matrix.drawPixel(0,8, matrix.Color(0,255,0));
  matrix.drawPixel(1,8, matrix.Color(0,255,0));
  matrix.drawPixel(2,8, matrix.Color(0,255,0));
  matrix.drawPixel(3,8, matrix.Color(0,255,0));
  matrix.drawPixel(4,8, matrix.Color(0,255,0));
  matrix.drawPixel(5,8, matrix.Color(0,255,0));
}
void EIGHT() {
  matrix.drawPixel(6,8, matrix.Color(0,255,0));
  matrix.drawPixel(7,8, matrix.Color(0,255,0));
  matrix.drawPixel(8,8, matrix.Color(0,255,0));
  matrix.drawPixel(9,8, matrix.Color(0,255,0));
  matrix.drawPixel(10,8, matrix.Color(0,255,0));
}
void ONE() {
  matrix.drawPixel(0,9, matrix.Color(0,255,0));
  matrix.drawPixel(1,9, matrix.Color(0,255,0));
  matrix.drawPixel(2,9, matrix.Color(0,255,0));
}
void SIX() {
  matrix.drawPixel(3,9, matrix.Color(0,255,0));
  matrix.drawPixel(4,9, matrix.Color(0,255,0));
  matrix.drawPixel(5,9, matrix.Color(0,255,0));
}
void THREE() {
  matrix.drawPixel(6,9, matrix.Color(0,255,0));
  matrix.drawPixel(7,9, matrix.Color(0,255,0));
  matrix.drawPixel(8,9, matrix.Color(0,255,0));
  matrix.drawPixel(9,9, matrix.Color(0,255,0));
  matrix.drawPixel(10,9, matrix.Color(0,255,0));
}
void FOUR() {
  matrix.drawPixel(0,10, matrix.Color(0,255,0));
  matrix.drawPixel(1,10, matrix.Color(0,255,0));
  matrix.drawPixel(2,10, matrix.Color(0,255,0));
  matrix.drawPixel(3,10, matrix.Color(0,255,0));
}
void OCLOCK() {
  matrix.drawPixel(5,10, matrix.Color(0,255,0));
  matrix.drawPixel(6,10, matrix.Color(0,255,0));
  matrix.drawPixel(7,10, matrix.Color(0,255,0));
  matrix.drawPixel(8,10, matrix.Color(0,255,0));
  matrix.drawPixel(9,10, matrix.Color(0,255,0));
  matrix.drawPixel(10,10, matrix.Color(0,255,0));
}
void DR() {
  matrix.drawPixel(6,2, matrix.Color(255,0,0));
  matrix.drawPixel(6,3, matrix.Color(255,0,0));
}

void displayWords() {
  //Always on
  Clear();
   ITS();

  //calculate minutes on the hour
    if(mytimemin>57 && mytimemin<3){
    }
    // do nothing, no minutes it's on the hour
    
    if(mytimemin>2 && mytimemin<8){
      
      FIVE();
      PAST();
    }
    
    if(mytimemin>7 && mytimemin<13){
      
      TEN();
      PAST();
    }
    if(mytimemin>12 && mytimemin<18){
      
      A();
      QUARTER();
      PAST();
    }
    if(mytimemin>17 && mytimemin<23){
      
      TWENTY();
      PAST();
    }
    if(mytimemin>22 && mytimemin<28){
      
      TWENTY();
      FIVE();
      PAST();
    }
    if(mytimemin>27 && mytimemin<33){
      
      HALF();
      PAST();
    }
    if(mytimemin>32 && mytimemin<38){
      
      TWENTY();
      FIVE();
      TIL();
    }
    if(mytimemin>37 && mytimemin<43){
      
      TWENTY();
      TIL();
    }
    if(mytimemin>42 && mytimemin<48){
      
      A();
      QUARTER();
      TIL();
    }    
    if(mytimemin>47 && mytimemin<53){
      
      TEN();
      TIL();
    }
    if(mytimemin>52 && mytimemin<58){
      
      FIVE();
      TIL();
    }


  // Calculate hour & oclocks
  if(mytimehr==1){
    if(mytimemin>32){
      TWO();
      OCLOCK();
    }
    else
    {
      ONE();
      OCLOCK();
    }
  }
  if(mytimehr==2){
    if(mytimemin>32){
      THREE();
      OCLOCK();
    }
    else
     
    {
      TWO();
      OCLOCK();
    }
  }
    if(mytimehr==3){
    if(mytimemin>32){
      FOUR();
      OCLOCK();
    }
    else
     
    {
      THREE();
      OCLOCK();
    }
  }
  if(mytimehr==4){
    if(mytimemin>32){
      FIVEBOT();
      OCLOCK();
    }
    else
     
    {
      FOUR();
      OCLOCK();
    }
  }
  if(mytimehr==5){
    if(mytimemin>32){
      SIX();
      OCLOCK();
    }
    else
     
    {
      FIVEBOT();
      OCLOCK();
    }
  }
  if(mytimehr==6){
    if(mytimemin>32){
      SEVEN();
      OCLOCK();
    }
    else
     
    {
      SIX();
      OCLOCK;
    }
  }
  if(mytimehr==7){
    if(mytimemin>32){
      EIGHT();
      OCLOCK();
    }
    else
     
    {
      SEVEN();
      OCLOCK();
    }
  }
  if(mytimehr==8){
    if(mytimemin>32){
      NINE();
      OCLOCK();
    }
    else
     
    {
      EIGHT();
      OCLOCK;
    }
  }
  if(mytimehr==9){
    if(mytimemin>32){
      TENBOT();
      OCLOCK;
    }
    else
     
    {
      NINE();
      OCLOCK();
    }
  }
  if(mytimehr==10){
    if(mytimemin>32){
      ELEVEN();
      OCLOCK();
    }
    else
     
    {
      TENBOT();
      OCLOCK();
    }
  }
  if(mytimehr==11){
    if(mytimemin>32){
      NOON();
    }
    else
     
    {
      ELEVEN();
      OCLOCK();
    }
  }
  if(mytimehr==12){
    if(mytimemin>32){
      ONE();
      OCLOCK();
    }
    else
     
    {
      NOON();
    }
  }
      if(mytimehr==13){
    if(mytimemin>32){
      TWO();
      OCLOCK();
    }
    else
     
    {
      ONE();
      OCLOCK();
    }
  }
  if(mytimehr==14){
    if(mytimemin>32){
      THREE();
      OCLOCK();
    }
    else
     
    {
      TWO();
      OCLOCK();
    }
  }
    if(mytimehr==15){
    if(mytimemin>32){
      FOUR();
      OCLOCK();
    }
    else
     
    {
      THREE();
      OCLOCK();
    }
  }
  if(mytimehr==16){
    if(mytimemin>32){
      FIVEBOT();
      OCLOCK();
    }
    else
     
    {
      FOUR();
      OCLOCK();
    }
  }
  if(mytimehr==17){
    if(mytimemin>32){
      SIX();
      OCLOCK();
    }
    else
     
    {
      FIVEBOT();
      OCLOCK();
    }
  }
  if(mytimehr==18){
    if(mytimemin>32){
      SEVEN();
      OCLOCK();
    }
    else
     
    {
      SIX();
      OCLOCK();
    }
  }
  if(mytimehr==19){
    if(mytimemin>32){
      EIGHT();
      OCLOCK();
    }
    else
     
    {
      SEVEN();
      OCLOCK();
    }
  }
  if(mytimehr==20){
    if(mytimemin>32){
       
      NINE();
      OCLOCK();
    }
    else
    { 
      EIGHT();
      OCLOCK();
    }
  }
  if(mytimehr==21){
    if(mytimemin>32){
      TENBOT();
      OCLOCK();
    }
    else
     
    {
      NINE();
      OCLOCK();
    }
  }
  if(mytimehr==22){
    if(mytimemin>32){
      ELEVEN();
      OCLOCK();
    }
    else
     
    {
      TENBOT();
      OCLOCK();
    }
  }
  if(mytimehr==23){
    if(mytimemin>32){
      MIDNIGHT();
    }
    else
     
    {
      ELEVEN();
      OCLOCK();
    }
  }
  if(mytimehr==0){
    if(mytimemin>32){
      ONE();
      OCLOCK();
    }
    else
     
    {
      MIDNIGHT();
    }
  }
  matrix.show();
}

void Clear() {
  for(int row = 0; row < 11; row++) {
    for(int col = 0; col <11; col++) {
      matrix.drawPixel(col,row, matrix.Color(0,0,0));
    }
  }
}
void wordScroll() {
  matrix.fillScreen(0);
  matrix.setCursor(x, 0);
  matrix.print(F("Kill me"));
  if(--x < -40) {
    x = matrix.width();
    if(++pass >= 3) pass = 0;
    matrix.setTextColor(colors[pass]);
  }
  matrix.show();
}
